# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictStr, conlist

class WorkspaceEntity(BaseModel):
    """
    WorkspaceEntity
    """
    id: StrictFloat = ...
    origin: Optional[StrictStr] = ...
    layout: Optional[conlist(Dict[str, Any])] = ...
    lock: StrictBool = ...
    project_id: StrictFloat = Field(..., alias="projectId")
    __properties = ["id", "origin", "layout", "lock", "projectId"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WorkspaceEntity:
        """Create an instance of WorkspaceEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if origin (nullable) is None
        # and __fields_set__ contains the field
        if self.origin is None and "origin" in self.__fields_set__:
            _dict['origin'] = None

        # set to None if layout (nullable) is None
        # and __fields_set__ contains the field
        if self.layout is None and "layout" in self.__fields_set__:
            _dict['layout'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WorkspaceEntity:
        """Create an instance of WorkspaceEntity from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return WorkspaceEntity.parse_obj(obj)

        _obj = WorkspaceEntity.parse_obj({
            "id": obj.get("id"),
            "origin": obj.get("origin"),
            "layout": obj.get("layout"),
            "lock": obj.get("lock"),
            "project_id": obj.get("projectId")
        })
        return _obj

