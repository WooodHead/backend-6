# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictStr, validator

class EventEntity(BaseModel):
    """
    EventEntity
    """
    type: StrictStr = ...
    id: StrictFloat = ...
    name: StrictStr = ...
    description: Optional[StrictStr] = ...
    color: StrictStr = ...
    serial: StrictFloat = ...
    created_at: datetime = Field(..., alias="createdAt")
    updated_at: datetime = Field(..., alias="updatedAt")
    deleted: Optional[datetime] = ...
    unit: StrictFloat = ...
    start: datetime = ...
    end: datetime = ...
    done: StrictBool = ...
    unresolved: Dict[str, Any] = ...
    content_id: Optional[StrictFloat] = Field(..., alias="contentId")
    project_id: StrictFloat = Field(..., alias="projectId")
    __properties = ["type", "id", "name", "description", "color", "serial", "createdAt", "updatedAt", "deleted", "unit", "start", "end", "done", "unresolved", "contentId", "projectId"]

    @validator('type')
    def type_validate_enum(cls, v):
        if v not in ('ATOM', 'COLLECTION'):
            raise ValueError("must be one of enum values ('ATOM', 'COLLECTION')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EventEntity:
        """Create an instance of EventEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if deleted (nullable) is None
        # and __fields_set__ contains the field
        if self.deleted is None and "deleted" in self.__fields_set__:
            _dict['deleted'] = None

        # set to None if content_id (nullable) is None
        # and __fields_set__ contains the field
        if self.content_id is None and "content_id" in self.__fields_set__:
            _dict['contentId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EventEntity:
        """Create an instance of EventEntity from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return EventEntity.parse_obj(obj)

        _obj = EventEntity.parse_obj({
            "type": obj.get("type"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "color": obj.get("color"),
            "serial": obj.get("serial"),
            "created_at": obj.get("createdAt"),
            "updated_at": obj.get("updatedAt"),
            "deleted": obj.get("deleted"),
            "unit": obj.get("unit"),
            "start": obj.get("start"),
            "end": obj.get("end"),
            "done": obj.get("done"),
            "unresolved": obj.get("unresolved"),
            "content_id": obj.get("contentId"),
            "project_id": obj.get("projectId")
        })
        return _obj

