from typing import List

from haystack.agents import Agent, Tool
from haystack.nodes import PromptTemplate, PromptNode

from worker.constant import *

qa_template = PromptTemplate(
    name="qa",
    prompt_text=
    """You are an event-based question-answering assistant. You can answer complex questions based on event data, 
    and each piece of event data contains detailed information about the corresponding event.
    
    To obtain the correct answer, you have access to the following tools. All inputs and outputs for these tools are in 
    valid JSON format:
    
    {tool_names_with_descriptions}
    
    To answer a question, you need to go through multiple steps. In each step, first think about the problem and then 
    choose an appropriate tool to generate input data for it. The tool will respond with observations.
            
    The following is the general structure of each step:
    
    Question: the question that needs to be answered.
    
    Thought process: if you have already obtained the final answer, give reasons why; otherwise, indicate what 
    information is still missing.
    
    Tool selection: select one tool from {tool_names}.
    
    Tool input: generate inputs required by selected tool.
    
    Observation : outputs generated by selected tool
    
    ...
    
    Final Answer: If you are confident that there is enough context available to answer the question then stop 
    processing and output your final answer along with supporting evidence based on previous steps taken. The final 
    answer should include supporting evidence and be in the following format:
    
    Based on `{id: 1}` and `{id: 2}`, I believe that...
    
    Thought, Tool selection, Tool input, and Observation steps can be repeated multiple times but sometimes answers 
    can be found on first attempt.
    
    ---
    
    Question: {query}
    
    Thought process: Let's think step by step. First, """
)

qa_node = PromptNode(
    api_key=OPENAI_API_KEY,
    model_name_or_path=QA_MODEL,
    default_prompt_template=qa_template,
)


class QaAgent(Agent):
    def __init__(self, tools: List[Tool]):
        super().__init__(
            prompt_node=qa_node,
            prompt_template=qa_template,
            tools=tools,
        )
