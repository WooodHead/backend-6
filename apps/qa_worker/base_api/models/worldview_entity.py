# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictFloat, StrictStr

class WorldviewEntity(BaseModel):
    """
    WorldviewEntity
    """
    path: StrictStr = ...
    id: StrictFloat = ...
    name: StrictStr = ...
    description: Optional[StrictStr] = ...
    deleted: Optional[datetime] = ...
    project_id: StrictFloat = Field(..., alias="projectId")
    content_id: Optional[StrictFloat] = Field(..., alias="contentId")
    __properties = ["path", "id", "name", "description", "deleted", "projectId", "contentId"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WorldviewEntity:
        """Create an instance of WorldviewEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if deleted (nullable) is None
        # and __fields_set__ contains the field
        if self.deleted is None and "deleted" in self.__fields_set__:
            _dict['deleted'] = None

        # set to None if content_id (nullable) is None
        # and __fields_set__ contains the field
        if self.content_id is None and "content_id" in self.__fields_set__:
            _dict['contentId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WorldviewEntity:
        """Create an instance of WorldviewEntity from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return WorldviewEntity.parse_obj(obj)

        _obj = WorldviewEntity.parse_obj({
            "path": obj.get("path"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "deleted": obj.get("deleted"),
            "project_id": obj.get("projectId"),
            "content_id": obj.get("contentId")
        })
        return _obj

