# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, StrictStr, conlist
from base_api.models.entity_option import EntityOption

class UnresolvedEntityDto(BaseModel):
    """
    UnresolvedEntityDto
    """
    name: StrictStr = ...
    options: conlist(EntityOption) = ...
    __properties = ["name", "options"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UnresolvedEntityDto:
        """Create an instance of UnresolvedEntityDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in options (list)
        _items = []
        if self.options:
            for _item in self.options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['options'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UnresolvedEntityDto:
        """Create an instance of UnresolvedEntityDto from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return UnresolvedEntityDto.parse_obj(obj)

        _obj = UnresolvedEntityDto.parse_obj({
            "name": obj.get("name"),
            "options": [EntityOption.from_dict(_item) for _item in obj.get("options")] if obj.get("options") is not None else None
        })
        return _obj

