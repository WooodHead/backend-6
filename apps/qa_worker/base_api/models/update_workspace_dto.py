# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr, conlist

class UpdateWorkspaceDto(BaseModel):
    """
    UpdateWorkspaceDto
    """
    origin: Optional[StrictStr] = None
    layout: Optional[conlist(Dict[str, Any])] = None
    lock: Optional[StrictBool] = None
    __properties = ["origin", "layout", "lock"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateWorkspaceDto:
        """Create an instance of UpdateWorkspaceDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateWorkspaceDto:
        """Create an instance of UpdateWorkspaceDto from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return UpdateWorkspaceDto.parse_obj(obj)

        _obj = UpdateWorkspaceDto.parse_obj({
            "origin": obj.get("origin"),
            "layout": obj.get("layout"),
            "lock": obj.get("lock")
        })
        return _obj

