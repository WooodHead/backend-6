version: "3"

services:
  app:
    build: .
    container_name: app
    restart: always
    depends_on:
      - db
      - neo4j
      - redis
      - rmq
      - milvus

  db:
    image: postgres:15.3-alpine
    container_name: db
    restart: always
    ports:
      - "5432:5432"
    env_file:
      - .env
    environment:
      POSTGRES_USER: $POSTGRES_USERNAME
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    volumes:
      - db:/var/lib/postgresql/data

  neo4j:
    image: neo4j:5.7.0
    container_name: neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    env_file:
      - .env
    environment:
      - NEO4J_AUTH=$NEO_USERNAME/$NEO_PASSWORD
      - NEO4J_HOME=/neo4j
    volumes:
      - ./config/neo4j.conf:/conf/neo4j.conf
      - neo4j:/neo4j
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider localhost:7474 || exit 1"
        ]

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    command: [ "redis-server", "/etc/redis/redis.conf" ]
    volumes:
      - ./config/redis.conf:/etc/redis/redis.conf
      - redis:/data

  rmq:
    image: rabbitmq:3.12-rc-management-alpine
    container_name: rmq
    restart: always
    ports:
      - "15672:15672"
      - "5672:5672"
    env_file:
      - .env
    environment:
      - RABBITMQ_DEFAULT_USER=$RMQ_USERNAME
      - RABBITMQ_DEFAULT_PASS=$RMQ_PASSWORD
    volumes:
      - rmq:/var/lib/rabbitmq

  milvus_etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - milvus_etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd

  milvus_minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2022-03-17T06-34-49Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    volumes:
      - milvus_minio:/minio_data
    command: minio server /minio_data
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:9000/minio/health/live"
        ]
      interval: 30s
      timeout: 20s
      retries: 3

  milvus_standalone:
    container_name: milvus
    image: milvusdb/milvus:v2.2.8
    command: [ "milvus", "run", "standalone" ]
    environment:
      ETCD_ENDPOINTS: milvus_etcd:2379
      MINIO_ADDRESS: milvus_minio:9000
    volumes:
      - milvus:/var/lib/milvus
    ports:
      - "19530:19530"
      # - "9091:9091" # milvus的http接口，与prometheus冲突；可用grpc接口
    depends_on:
      - "milvus_etcd"
      - "milvus_minio"

  apisix-dashboard:
    image: apache/apisix-dashboard:3.0.1-alpine
    container_name: apisix-dashboard
    restart: always
    volumes:
      - ./config/dashboard_conf/conf.yaml:/usr/local/apisix-dashboard/conf/conf.yaml
    ports:
      - "9000:9000"

  apisix:
    image: apache/apisix:3.3.0-debian
    container_name: apisix
    restart: always
    volumes:
      - ./config/apisix_conf/config.yaml:/usr/local/apisix/conf/config.yaml:ro
    depends_on:
      - apisix_etcd
    ports:
      - "9180:9180/tcp"
      - "9080:9080/tcp"
      - "9091:9091/tcp"
      - "9443:9443/tcp"
      - "9092:9092/tcp"

  apisix_etcd:
    image: bitnami/etcd:3.4.15
    container_name: apisix-etcd
    restart: always
    volumes:
      - apisix_etcd:/bitnami/etcd
    environment:
      ETCD_ENABLE_V2: "true"
      ALLOW_NONE_AUTHENTICATION: "yes"
      ETCD_ADVERTISE_CLIENT_URLS: "http://apisix_etcd:2379"
      ETCD_LISTEN_CLIENT_URLS: "http://0.0.0.0:2379"
    ports:
      - "2379:2379/tcp"

  prometheus:
    image: prom/prometheus:v2.25.0
    container_name: apisix-prometheus
    restart: always
    volumes:
      - ./config/prometheus_conf/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:7.3.7
    container_name: apisix-grafana
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - "./config/grafana_conf/provisioning:/etc/grafana/provisioning"
      - "./config/grafana_conf/dashboards:/var/lib/grafana/dashboards"
      - "./config/grafana_conf/config/grafana.ini:/etc/grafana/grafana.ini"

networks:
  default:
    name: chiral

volumes:
  db:
    driver: local
  redis:
    driver: local
  rmq:
    driver: local
  neo4j:
    driver: local
  milvus:
    driver: local
  milvus_etcd:
    driver: local
  milvus_minio:
    driver: local
  apisix_etcd:
    driver: local
